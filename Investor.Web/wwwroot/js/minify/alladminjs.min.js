/***********************************************************************************
* Add Array.indexOf                                                                *
***********************************************************************************/
(function ()
{
	if (typeof Array.prototype.indexOf !== 'function')
	{
		Array.prototype.indexOf = function(searchElement, fromIndex)
		{
			for (var i = (fromIndex || 0), j = this.length; i < j; i += 1)
			{
				if ((searchElement === undefined) || (searchElement === null))
				{
					if (this[i] === searchElement)
					{
						return i;
					}
				}
				else if (this[i] === searchElement)
				{
					return i;
				}
			}
			return -1;
		};
	}
})();
/**********************************************************************************/

(function ($,undefined)
{
	var toasting =
	{
		gettoaster : function ()
		{
			var toaster = $('#' + settings.toaster.id);

			if(toaster.length < 1)
			{
				toaster = $(settings.toaster.template).attr('id', settings.toaster.id).css(settings.toaster.css).addClass(settings.toaster['class']);

				if ((settings.stylesheet) && (!$("link[href=" + settings.stylesheet + "]").length))
				{
					$('head').appendTo('<link rel="stylesheet" href="' + settings.stylesheet + '">');
				}

				$(settings.toaster.container).append(toaster);
			}

			return toaster;
		},

		notify : function (title, message, priority)
		{
			var $toaster = this.gettoaster();
			var $toast  = $(settings.toast.template.replace('%priority%', priority)).hide().css(settings.toast.css).addClass(settings.toast['class']);

			$('.title', $toast).css(settings.toast.csst).html(title);
			$('.message', $toast).css(settings.toast.cssm).html(message);

			if ((settings.debug) && (window.console))
			{
				console.log(toast);
			}

			$toaster.append(settings.toast.display($toast));

			if (settings.donotdismiss.indexOf(priority) === -1)
			{
				var timeout = (typeof settings.timeout === 'number') ? settings.timeout : ((typeof settings.timeout === 'object') && (priority in settings.timeout)) ? settings.timeout[priority] : 1500;
				setTimeout(function()
				{
					settings.toast.remove($toast, function()
					{
						$toast.remove();
					});
				}, timeout);
			}
		}
	};

	var defaults =
	{
		'toaster'         :
		{
			'id'        : 'toaster',
			'container' : 'body',
			'template'  : '<div></div>',
			'class'     : 'toaster',
			'css'       :
			{
				'position' : 'fixed',
				'top'      : '10px',
				'right'    : '10px',
				'width'    : '300px',
				'zIndex'   : 50000
			}
		},

		'toast'       :
		{
			'template' :
			'<div class="alert alert-%priority% alert-dismissible" role="alert">' +
				'<button type="button" class="close" data-dismiss="alert">' +
					'<span aria-hidden="true">&times;</span>' +
					'<span class="sr-only">Close</span>' +
				'</button>' +
				'<span class="title"></span>: <span class="message"></span>' +
			'</div>',

			'defaults' :
			{
				'title'    : 'Notice',
				'priority' : 'success'
			},

			'css'      : {},
			'cssm'     : {},
			'csst'     : { 'fontWeight' : 'bold' },

			'fade'     : 'slow',

			'display'    : function ($toast)
			{
				return $toast.fadeIn(settings.toast.fade);
			},

			'remove'     : function ($toast, callback)
			{
				return $toast.animate(
					{
						opacity : '0',
						padding : '0px',
						margin  : '0px',
						height  : '0px'
					},
					{
						duration : settings.toast.fade,
						complete : callback
					}
				);
			}
		},

		'debug'        : false,
		'timeout'      : 1500,
		'stylesheet'   : null,
		'donotdismiss' : []
	};

	var settings = {};
	$.extend(settings, defaults);

	$.toaster = function (options)
	{
		if (typeof options === 'object')
		{
			if ('settings' in options)
			{
				settings = $.extend(true, settings, options.settings);
			}
		}
		else
		{
			var values = Array.prototype.slice.call(arguments, 0);
			var labels = ['message', 'title', 'priority'];
			options = {};

			for (var i = 0, l = values.length; i < l; i += 1)
			{
				options[labels[i]] = values[i];
			}
		}

		var title    = (('title' in options) && (typeof options.title === 'string')) ? options.title : settings.toast.defaults.title;
		var message  = ('message' in options) ? options.message : null;
		var priority = (('priority' in options) && (typeof options.priority === 'string')) ? options.priority : settings.toast.defaults.priority;

		if (message !== null)
		{
			toasting.notify(title, message, priority);
		}
	};

	$.toaster.reset = function ()
	{
		settings = {};
		$.extend(settings, defaults);
	};
})(jQuery);

let chosenPostsIds = [];

$(document).on("click",
	".delete",
	function (e) {
		if ($(this).hasClass("tags")){
			$("#question").html("Ви дійсно хочете видалити теги? Кільксть: " + chosenPostsIds.length);
		}
		else if ($(this).hasClass("news")) {
			$("#question").html("Ви дійсно хочете видалити новини? Кільксть: "  + chosenPostsIds.length);
		}
		else if ($(this).hasClass("blogs")) {
			$("#question").html("Ви дійсно хочете видалити блоги? Кільксть: "  + chosenPostsIds.length);
		}
		else if ($(this).hasClass("single-news") || $(this).hasClass("single-blog")) {
			var postId = $("input[name='PostId']").val();

			var url = $(this).data("href");
			chosenPostsIds.push(postId);
			deleteSinglePost.call(this, url, chosenPostsIds);
		}
	});

$(document).on("change",
	"tbody td:first-child",
	function (e) {
		const tableId = "#" + $(this).closest("table").prop("id");
		const tableDataObj = tables[tableId].row($(this).parents("tr")).data();
		let ObjId = 0;
		if (tableId === "#blogsTable" || tableId === "#newsTable") {
			ObjId = tableDataObj.postId;
		}
		else if (tableId == "#tagsTable") {
			ObjId = tableDataObj.tagId;
		}
		const propertyValue = $(e.target).prop("checked");
		if (propertyValue) {
			chosenPostsIds.push(ObjId);
		}
		else {
			delete chosenPostsIds.splice([chosenPostsIds.indexOf(ObjId)], 1);
		}

		if (chosenPostsIds.length > 0) {
			$(".delete").removeClass("disabled");
		}
		else {
			$(".delete").addClass("disabled");
		}

	});

$(document).on("click", "a.nav-link", function (e) {
	const url = $(this).data("href");
	const type = $(e.target).data("type");
	if (type && type === "delete") {
		deleteObj.call(this, url, chosenPostsIds);
	}
});

let deleteObj = function (url, data) {
	$.ajax({
		url: url,
		contentType: "application/x-www-form-urlencoded; charset=utf-8",
		dataType: "json",
		type: "POST",
		data: { id: data },
		success: function (data) {
			const tableId = "#" + $(".table").attr("id");
			$(tableId).dataTable().fnDestroy(); //TODO ВИПРАВИТИ!!!!!!!!
			var a = "";
			if ($("a.nav-link").hasClass("tags")) {
				initialTable(tableId);
				a = "Теги";
			}
			else if ($("a.nav-link").hasClass("news")) {
				initialTable(tableId);
				a = "Статті";
			}
			else if ($("a.nav-link").hasClass("blogs")) {
				initialTable(tableId);
				a = "Блоги";
			}
			chosenPostsIds = [];
			$.toaster({
				priority: "warning",
				title: "Операція успішна",
				message: `\n ${a} видалено!`,
				settings: {
					'timeout': 4000
				}
            });
		    $(".delete").addClass("disabled");
		}
	});
}

let deleteSinglePost = function (url, data) {
	let $this = this;
	$.ajax({
		url: url,
		type: "POST",
		contentType: "application/x-www-form-urlencoded; charset=utf-8",
		dataType: "json",
		data: { id: data },
		success: function (data) {
			if ($($this).hasClass("single-blog")) {
				chosenPostsIds = [];
				location.replace("/admin#/content/blogs");
				$.toaster({
					priority: "warning",
					title: "Операція успішна",
					message: `Блог видалено!`,
					settings: {
						'timeout': 4000
					}
				});
			}
			else if ($($this).hasClass("single-news")) {
				chosenPostsIds = [];
				location.replace("/admin#/content/news");
				$.toaster({
					priority: "warning",
					title: "Операція успішна",
					message: `Статтю видалено!`,
					settings: {
						'timeout': 4000
					}
				});
			}
		}
	});
}
let tables = {};

let initialTable = function (tableId) {

	switch (tableId) {
		case "#newsTable":
			tables[tableId] = $(tableId).DataTable({
				"ajax": "/api/NewsApi/GetAllNews",
				"columns": [
					{
						data: null,
						orderable: false,
						render: function () {
							return `<div class="text-center">  <label class="custom-control custom-checkbox ">
                                    <input type="checkbox" class="custom-control-input md-check" >
                                    <span class="custom-control-indicator size-check"></span>
                                </label></div>`;
						}
					},
					{
						"data": "postId",
						"visible": false,
						render: function (data, type, full, meta) {
							return data;
						}

					},
					{
						"data": "title",
						render: function (data, type, full) {
							return `<a href="/admin#/post/${full.postId
								}" data-type="singlepost" class="nav-link max-link-w" data-href="/content/singlepost/${full.postId}">${data}</a>`;
						}

					},
					{
						"data": "publishedOn",
						render: function (data, type, full, meta) {
							return `<p class="max-date-w">${moment(data).format("DD.MM.YYYY HH:mm")}<p>`;
						}
					},
					{ "data": "category.name" },
					{
						"data": "isPublished",
						render: function (data, type, full, meta) {
							return `<div class="text-center">  <label class="custom-control custom-checkbox ">
                                    <input type="checkbox" data-name="IsPublished" class="custom-control-input md-check" ${data ? "checked" : ""}>
                                    <span class="custom-control-indicator size-check"></span>
                                </label></div>`;
						}
					},
					{
						"data": "isOnMainPage",
						render: function (data, type, full, meta) {
							return `<div class="text-center">  <label class="custom-control custom-checkbox ">
                                    <input type="checkbox" data-name="IsOnMainPage" class="custom-control-input md-check" ${data ? "checked" : ""}>
                                    <span class="custom-control-indicator size-check"></span>
                                </label></div>`;
						}
					},
					{
						"data": "isImportant",
						render: function (data, type, full, meta) {
							return `<div class="text-center">  <label class="custom-control custom-checkbox ">
                                    <input type="checkbox" data-name="IsImportant" class="custom-control-input md-check" ${data ? "checked" : ""}>
                                    <span class="custom-control-indicator size-check"></span>
                                </label></div>`;
						}
					},
					{
						"data": "isOnSide",
						render: function (data, type, full, meta) {
							return `<div class="text-center">  <label class="custom-control custom-checkbox ">
                                    <input type="checkbox" data-name="isOnSide" class="custom-control-input md-check" ${data ? "checked" : ""}>
                                    <span class="custom-control-indicator size-check"></span>
                                </label></div>`;
						}
					},
					{
						"data": "isOnSlider",
						render: function (data, type, full, meta) {
							return `<div class="text-center">  <label class="custom-control custom-checkbox ">
                                    <input type="checkbox" data-name="isOnSlider" class="custom-control-input md-check" ${data ? "checked" : ""}>
                                    <span class="custom-control-indicator size-check"></span>
                                </label></div>`;
						}
					}
                ],
				"language": {
                    "url": "//cdn.datatables.net/plug-ins/1.10.16/i18n/Ukrainian.json"
				}
			});
			break;
		case "#blogsTable":
			tables[tableId] = $(tableId).DataTable({

				"ajax": "/api/BlogsApi/GetAllBlogs",
				"columns": [
					{
						data: null,
						orderable: false,
						render: function () {
							return `<div class="text-center">  <label class="custom-control custom-checkbox ">
                                    <input type="checkbox" class="custom-control-input md-check" >
                                    <span class="custom-control-indicator size-check"></span>
                                </label></div>`;
						}
					},
					{
						"data": "postId",
						"visible": false,
						render: function (data, type, full, meta) {
							return data;
						}

					},
					{
						"data": "title",
						render: function (data, type, full) {
							return `<a href="/admin#/blog/${full.postId
								}" data-type="singleblog" class="nav-link" data-href="/content/singleblog/${full.postId}">${data
								}</a>`;
						}

					},
					{
						"data": null,
						render: function (data, type, full) {
							return `<a href="blog/blogerpage/${full["author"]["userName"]}">${full["author"] ? `${full["author"]["surname"]}  ${full["author"]["name"]}` : "Unknown"}</a>`;
						}
					},
					{
						"data": "createdOn",
						render: function (data, type, full, meta) {
							return moment(data).format("DD.MM.YYYY HH:mm");
						}
					},
					{
						"data": "isPublished",
						render: function (data, type, full, meta) {
							return `<div class="text-center">  <label class="custom-control custom-checkbox ">
                                    <input asp-for="IsPublished" type="checkbox" data-name="IsPublished"  ${data ? "checked" : ""} 
									class="custom-control-input md-check"  name="IsPublished" >
                                    <span class="custom-control-indicator size-check"></span>
                                </label></div>`;
						}
					}
				],
                "language": {
                    "url": "//cdn.datatables.net/plug-ins/1.10.16/i18n/Ukrainian.json"

                }
			});
			break;
		case "#tagsTable":
			tables[tableId] = $(tableId).DataTable({

				"ajax": "/api/TagsApi/GetAllTags",
				"columns": [
					{
						data: null,
						orderable: false,
						render: function () {
							return `<div class="text-center"><input type="checkbox" class="md-check"></div>`;
						}
					},
					{
						"data": "tagId",
						"visible": false,
						render: function (data, type, full, meta) {
							return data;
						}

					},
					{
						"data": "name",
						render: function (data, type, full) {
							return `<a data-toggle="modal" href="#editTag" class="tag-submit">${data}</a>`;
						}

					},
					{
						"data": "postCount",
						render: function (data, type, full) {
							return data;
						}
					},
					{
						data: "url",
						"visible": false,
						render: function (data) {
							return data;
						}
					}
				],
				"language": {
				    "url": "//cdn.datatables.net/plug-ins/1.10.16/i18n/Ukrainian.json"
				}
			});
			break;
		case "#usersTable":
			var select = $(`<select></select>`);
			var userRoles = {};

			tables[tableId] = $(tableId).DataTable({
				ajax: {
					url: "/api/UsersApi/GetAllUsers",
					"dataSrc": function (json) {
						select = $(`<select class="roles"></select>`);
						for (let i = 0; i < json.data.roles.length; i++)
							select.append(`<option class='${json.data.roles[i]}'>${json.data.roles[i]}</option>`);
						return json.data.result;
					},
				},

				"columns": [
					{
						data: null,
						orderable: false,
						render: function () {
							return `<div class="text-center"><input type="checkbox" class="md-check"></div>`;
						}
					},
					{
						"data": "id",
						"visible": false,
						render: function (data, type, full, meta) {
							return data;
						}

					},
					{
						"data": null,
						render: function (data, type, full) {
							return `<a href="/blog/blogerpage/${full.userName}" class="tag-submit">${full.surname} ${full.name}</a>`;
						}

					},
					{
						"data": "userName",
						render: function (data, type, full) {
							return data;
						}

					},
					{
						"data": "email",
						render: function (data, type, full) {
							return data;
						}
					},
					{
						"data": "numberOfBlogs",
						render: function (data, type, full) {
							return data;
						}
					},
					{
						data: "role",
						render: function (data) {
							var newSelect = select.clone();
							newSelect.children(`.${data}`).attr(`selected`, true);
							return newSelect.prop("outerHTML");
						}
					}
				],
				"language": {
				    "url": "//cdn.datatables.net/plug-ins/1.10.16/i18n/Ukrainian.json"
				}
			});
			break;
		default:
			break;
	}

}

let getPartialView = function (url, callback = undefined, tableId = undefined) {
	$.ajax({
		url: url,
		type: "GET",
		success: function (data) {
			$("#container").empty();
			$("#container").append(data);
			chosenPostsIds = [];
			if (callback) {
				callback(`#${$("table").attr("id")}`);
			}
		},
		error: function(xhr, status, error) {
			$.ajax({
				url: `admin/StatusCode/${xhr.status}`,
				type: "GET",
				success: function(data) {
					$("#container").empty();
					$("#container").append(data);
				}
			});
		}
	});
};

$(document).on('change',
	'tbody td:not(:first-child)',
	function (e) {

		const tableId = `#${$(this).closest('table').prop("id")}`;
		const idx = tables[tableId].cell(this).index().column;

		const tableDataObj = tables[tableId].row($(this).parents("tr")).data();
		const propertyName = tables[tableId].settings().init().columns[idx].data;
		var properyValue;
		if ($(e.target).is("input")) {
			properyValue = $(e.target).prop("checked");
			if (tablesUpdetedData[tableDataObj.postId]) {
				tablesUpdetedData[tableDataObj.postId][propertyName] = properyValue;
			} else {
				tablesUpdetedData[tableDataObj.postId] = tableDataObj;
				tablesUpdetedData[tableDataObj.postId][propertyName] = properyValue;
			}
			if ((e.target).classList.contains('modified')) {
				(e.target).classList.remove('modified');
			} else {
				(e.target).classList.add('modified');
			}
		}
		else if ($(e.target).is('select')) {
			properyValue = $(e.target).val();
			if (tablesUpdetedData[tableDataObj.id]) {
				tablesUpdetedData[tableDataObj.id][propertyName] = properyValue;
			} else {
				tablesUpdetedData[tableDataObj.id] = tableDataObj;
				tablesUpdetedData[tableDataObj.id][propertyName] = properyValue;
				(e.target).classList.add('modified');
			}
		}
		if ($('.modified').length > 0) {
			$('.update').removeClass('disabled');
		} else {
			$('.update').addClass('disabled');
		}
	});

let tablesUpdetedData = {};

$(document).on("click", "a.nav-link", function (e) {

	const url = $(this).data("href");
	const type = $(this).data("type");

	if (type && type === "update") {
		let tempArray = [];
		const keys = Object.keys(tablesUpdetedData);

		for (let i = 0; i < keys.length; i += 1) {
			tempArray.push(tablesUpdetedData[keys[i]]);
		}
		updetePosts.call(this, url, tempArray);
		tablesUpdetedData = {};
	}
});

let updetePosts = function (url, postData) {
	var $this = this;
	$.ajax({
		url: url,
		contentType: 'application/x-www-form-urlencoded; charset=utf-8',
		dataType: 'json',
		type: "POST",
		data: { content: postData },
		success: function (data) {
			$.toaster({
				priority: 'success',
				title: 'Операція успішна',
				message: `Зміни збережено!`,
				settings: {
					'timeout': 4000
				}
			});
			$($this).addClass('disabled');
			$('input[type="checkbox"]').toArray().forEach(function (item) {
				item.classList.remove('modified');
			});
		}
	});
}


let initTypeahead = function () {

	var tags = [];
	tinymce.init({
		mode: "specific_textareas",
        selector: ".text-editor",
		//content_css: "css/metronic/style.css",
		theme: "modern",
		height: "480",
		plugins: [
			"advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker",
			"searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking",
			"save table contextmenu directionality emoticons template paste textcolor"
		],

		toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | print preview media fullpage | forecolor backcolor emoticons",
		style_formats: [
			{ title: 'Bold text', inline: 'b' },
			{ title: 'Red text', inline: 'span', styles: { color: '#ff0000' } },
			{ title: 'Red header', block: 'h1', styles: { color: '#ff0000' } },
			{ title: 'Example 1', inline: 'span', classes: 'example1' },
			{ title: 'Example 2', inline: 'span', classes: 'example2' },
			{ title: 'Table styles' },
			{ title: 'Table row 1', selector: 'tr', classes: 'tablerow1' }
		]
	});

	if (tinymce.editors.length > 0) {
		tinymce.execCommand('mceFocus', true, 'Article');
		tinymce.execCommand('mceRemoveEditor', true, 'Article');
		tinymce.execCommand('mceAddEditor', true, 'Article');
	}

	$(document).ready(function () {

		$.ajax({
			url: "/api/TagsApi/GetAllTags",
			type: "GET",
			success: function (data) {
				data.data.map(item => {
					tags.push(item.name);
				});
			}
		});

		$('#updateFormSubmit').on("click",
			function (e) {
				const $this = $(this);
				$this.attr("disabled", "disabled");
				var formId = $('.updateForm').attr('id');
				var formData = new FormData(document.getElementById(formId));
                const category = formData.get("Category.Url");
                formData.append('Category', formData.get("Category.Url"));
				formData.set('IsOnMainPage', $(`#${formId} input[name='IsOnMainPage']`).prop("checked"));
				formData.set('IsPublished', $(`#${formId} input[name='IsPublished']`).prop("checked"));
				formData.set('IsImportant', $(`#${formId} input[name='IsImportant']`).prop("checked"));

				formData.set('IsOnSide', $(`#${formId} input[name='IsOnSide']`).prop("checked"));
				formData.set('IsOnSlider', $(`#${formId} input[name='IsOnSlider']`).prop("checked"));
				formData.set('Article', tinyMCE.get('Article').getContent());
				var tagsArray = $(`#${formId} input[Name='tagsName']`).tagsinput('items');

				for (let i = 0; i < tagsArray.length; i++)
					formData.append(`Tags[` + i + `]`, tagsArray[i]);
				var file = $(`#${formId} input[name='Image']`).get(0).files;
				formData.set("Image", $(`#${formId} input[name='Image']`).get(0).files[0]);

				const apiTypeUrl = category ? "NewsApi" : "BlogsApi";
				const apiAction = category ? "UpdateNews" : "UpdateBlog";
				$.ajax({
					type: "POST",
					url: `/api/${apiTypeUrl}/${$(this).data("action")}`,
					data: formData,
					cache: false,
					contentType: false,
					processData: false,
					success: function (data) {
						console.log(data);
						$("#updateFormSubmit").data("action", apiAction);
						$(`#${formId} input[name='PostId']`).val(data["id"]);
						$this.removeAttr("disabled");
						$(`.deletepost`).removeAttr('hidden');
						$(`.previewpost`).removeAttr('hidden');
						$(`.previewpost`).attr('href', data["href"]);

						$.toaster({
							priority: 'success',
							title: 'Операція успішна',
							message: "\nСтаттю збережено!",
							settings: {
								'timeout': 4000
							}
						});
					},
					error: function (data) {
						$this.removeAttr("disabled");
						$.toaster({
							priority: 'error',
							title: 'Упс',
							message: "\nЩось пішло не так!",
							settings: {
								'timeout': 4000
							}
						});
					}


				});
				e.preventDefault();
			});

		$(document).on('submit',
			'.updateForm',
			function (e) {
				//prevent the form from doing a submit
				e.preventDefault();
				return false;
			});
	});

	var substringMatcher = function (strs) {
		return function findMatches(q, cb) {
			var substringRegex;
			var matches = [];
			// regex used to determine if a string contains the substring `q`
			substrRegex = new RegExp(q, 'i');

			// iterate through the pool of strings and for any string that
			// contains the substring `q`, add it to the `matches` array
			$.each(strs, function (i, str) {
				if (substrRegex.test(str)) {
					matches.push(str);
				}
			});
			cb(matches);
		};
	};

	$(".tagTypeahead").tagsinput({
		typeaheadjs: {
			name: 'tags',
			source: substringMatcher(tags)
		}
	});
}









$(document).on("click", "a.tag-submit", function (e) {
	const tableId = `#${$(this).closest("table").prop("id")}`;
	const row = $(this).closest("tr").index();
	const tableDataObj = tables[tableId].row($(this).parents("tr")).data();
	$(`${$(this).attr("href")} input[name='TagId']`).val(tableDataObj.tagId);
	$(`${$(this).attr("href")} input[name='Url']`).val(tableDataObj.url);
	$(`${$(this).attr("href")} input[name='Name']`).val(tableDataObj.name);

});

//create + update
$(document).on("click", ".tag-update", function (e) {
	var url = $(this).data("href");
	let formData = new FormData(document.getElementById($(this).attr("form")));
	e.preventDefault();
	$.ajax({
		type: "POST",
		url: url,
		data: formData,
		cache: false,
		contentType: false,
		processData: false,

		success: function (data) {
			const tableId = "#" + $(".table").attr("id");
			$(tableId).dataTable().fnDestroy(); //TODO ВИПРАВИТИ!!!!!!!!
			initialTable(tableId);
			$.toaster({
				priority: 'success',
				title: 'Операція успішна',
				message: "\nТег збережено!",
				settings: {
					'timeout': 40000
				}
			});
		}
	});
});

const getUrlFragment = function (url) {
    const fragmentPosition = url.indexOf("#");
    if (fragmentPosition !== -1) {
        return url.slice(fragmentPosition + 1, url.length);
    }
    else {
        return undefined;
    }
}

let getContent = function (e) {
    const url = location.hash.replace("#", "");

    if (url.startsWith("/post/")) {
        getPartialView(`admin${url}`, function () { initTypeahead(); $("#updateFormSubmit").data("action", "UpdateNews"); });
    }
    else if (url.startsWith("/blog/")) {
        getPartialView(`admin${url}`, function () { initTypeahead(); $("#updateFormSubmit").data("action", "UpdateBlog"); });
    }
    else if (url.startsWith("/dashboard")) {
        getPartialView(`admin${url}`, initialGoogleAnalyticsDashboard);
    }
    else if (url.startsWith("/createpost")) {
        getPartialView(`admin${url}`, function () { initTypeahead(); $("#updateFormSubmit").data("action", "CreateNews"); });
    }
    else if (url !== "") {
        getPartialView(`admin${url}`, initialTable);
    }

    tablesUpdetedData = {};



    var path = window.location.pathname + window.location.hash;
    $('.nav-item a').each(function () {
        $(this).removeClass('active-item');
    });
    $('.nav-item a').each(function () {
        if ($(this).attr('href') === path) {
            $(this).addClass('active-item');
            $(this).parent().prev('.nav-item a').addClass('active-item');
        }
    });
}

window.addEventListener("popstate", getContent, false);
window.addEventListener("load", getContent, false);


$("#logoff").click(function (e) {
    e.preventDefault();
    logOff();
});


let logOff = function () {
    $.ajax({
        url: "/admin/account/logoff",
        type: "POST",
        success: function (data) {
            window.location.href = data;
        }
    });
}

let viewSelector = null;
let timeline = null;

let newTimelineOption = {
    reportType: 'ga',
    query: {
        'dimensions': 'ga:date',
        'metrics': 'ga:sessions',
        'start-date': '30daysAgo',
        'end-date': 'yesterday',
    },
    chart: {
        type: 'LINE',
        container: 'timeline'
    }
};

let initialGoogleAnalyticsDashboard = function () {

    if (viewSelector && timeline) {
        viewSelector.execute();
        timeline = new gapi.analytics.googleCharts.DataChart(newTimelineOption);
        return;
    }

    const clientId = '565347094570-46d26vk6cbpknqfh6aiu3l8btr8lde5h.apps.googleusercontent.com';

    gapi.analytics.auth.authorize({
        container: 'auth-button',
        clientid: clientId
    });

    // Step 4: Create the view selector.

    viewSelector = new gapi.analytics.ViewSelector({
        container: 'view-selector'
    });

    // Step 5: Create the timeline chart.

    timeline = new gapi.analytics.googleCharts.DataChart(newTimelineOption);

    // Step 6: Hook up the components to work together.

    gapi.analytics.auth.on('success', function (response) {
        viewSelector.execute();
    });

    viewSelector.on('change', function (ids) {
        console.log(ids);
        var newIds = {
            query: {
                ids: ids
            }
        }
        timeline.set(newIds).execute();
    });

};